// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { FamiliesCreateFamilyData, FamiliesCreateFamilyResponse, FamiliesJoinFamilyData, FamiliesJoinFamilyResponse, ListsCreateListData, ListsCreateListResponse, ListsUpdateListData, ListsUpdateListResponse, ListsDeleteListData, ListsDeleteListResponse, LoginLoginAccessTokenData, LoginLoginAccessTokenResponse, PingPingResponse, TasksReadTasksResponse, TasksCreateTaskData, TasksCreateTaskResponse, TasksCompleteTaskData, TasksCompleteTaskResponse, TasksDeleteTaskData, TasksDeleteTaskResponse, UsersReadUserMeResponse, UsersRegisterUserData, UsersRegisterUserResponse, UsersPromoteUserData, UsersPromoteUserResponse } from './types.gen';

export class FamiliesService {
    /**
     * Create Family
     * Create new family.
     * @param data The data for the request.
     * @param data.name
     * @returns FamilyPublic Successful Response
     * @throws ApiError
     */
    public static createFamily(data: FamiliesCreateFamilyData): CancelablePromise<FamiliesCreateFamilyResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/families/',
            query: {
                name: data.name
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Join Family
     * Join a family.
     * @param data The data for the request.
     * @param data.inviteCode
     * @returns FamilyPublic Successful Response
     * @throws ApiError
     */
    public static joinFamily(data: FamiliesJoinFamilyData): CancelablePromise<FamiliesJoinFamilyResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/families/join',
            query: {
                invite_code: data.inviteCode
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class ListsService {
    /**
     * Create List
     * Create new list.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ListPublic Successful Response
     * @throws ApiError
     */
    public static createList(data: ListsCreateListData): CancelablePromise<ListsCreateListResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/lists/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update List
     * Update a list.
     * @param data The data for the request.
     * @param data.listId
     * @param data.requestBody
     * @returns ListPublic Successful Response
     * @throws ApiError
     */
    public static updateList(data: ListsUpdateListData): CancelablePromise<ListsUpdateListResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/lists/{list_id}',
            path: {
                list_id: data.listId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete List
     * Delete list
     * @param data The data for the request.
     * @param data.id
     * @param data.currentUser
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteList(data: ListsDeleteListData): CancelablePromise<ListsDeleteListResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/lists/{id}',
            path: {
                id: data.id
            },
            query: {
                current_user: data.currentUser
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class LoginService {
    /**
     * Login Access Token
     * Authenticates a user and returns an access token if credentials are correct.
     * @param data The data for the request.
     * @param data.formData
     * @returns Token Successful Response
     * @throws ApiError
     */
    public static loginAccessToken(data: LoginLoginAccessTokenData): CancelablePromise<LoginLoginAccessTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/login/access-token',
            formData: data.formData,
            mediaType: 'application/x-www-form-urlencoded',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class PingService {
    /**
     * Ping
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static ping(): CancelablePromise<PingPingResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ping/'
        });
    }
    
}

export class TasksService {
    /**
     * Read Tasks
     * Retrieve tasks.
     * @returns TasksPublic Successful Response
     * @throws ApiError
     */
    public static readTasks(): CancelablePromise<TasksReadTasksResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/tasks/'
        });
    }
    
    /**
     * Create Task
     * Create new task.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns TaskPublic Successful Response
     * @throws ApiError
     */
    public static createTask(data: TasksCreateTaskData): CancelablePromise<TasksCreateTaskResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/tasks/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Complete Task
     * Complete task.
     * @param data The data for the request.
     * @param data.id
     * @returns TaskPublic Successful Response
     * @throws ApiError
     */
    public static completeTask(data: TasksCompleteTaskData): CancelablePromise<TasksCompleteTaskResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/tasks/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Task
     * Delete task
     * @param data The data for the request.
     * @param data.id
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteTask(data: TasksDeleteTaskData): CancelablePromise<TasksDeleteTaskResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/tasks/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class UsersService {
    /**
     * Read User Me
     * Retrieves the current authenticated user's information.
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static readUserMe(): CancelablePromise<UsersReadUserMeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/users/me'
        });
    }
    
    /**
     * Register User
     * Create new user without the need to be logged in.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static registerUser(data: UsersRegisterUserData): CancelablePromise<UsersRegisterUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/users/signup',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Promote User
     * @param data The data for the request.
     * @param data.userId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static promoteUser(data: UsersPromoteUserData): CancelablePromise<UsersPromoteUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/users/promote/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}